import requests
from typing import Dict, Any, Optional, List
import os
from dotenv import load_dotenv
import time

load_dotenv()

class APIClient:
    def __init__(self):
        self.base_url = "http://localhost:8000"
        self.token = None
        # Configure requests session with default timeout and retries
        self.session = requests.Session()
        retries = requests.adapters.Retry(
            total=3,
            backoff_factor=0.5,
            status_forcelist=[500, 502, 503, 504]
        )
        self.session.mount('http://', requests.adapters.HTTPAdapter(max_retries=retries))
        self.session.mount('https://', requests.adapters.HTTPAdapter(max_retries=retries))
        
        # Add caching for better performance
        self._cache = {}
        self._cache_timeout = {}
        self._default_cache_timeout = 60  # Default cache timeout in seconds

    def login(self, username: str, password: str) -> bool:
        try:
            print(f"Attempting login with username: {username}")
            response = self.session.post(
                f"{self.base_url}/auth/login",
                headers={"Content-Type": "application/x-www-form-urlencoded"},
                data={
                    "username": username,
                    "password": password,
                    "grant_type": "password"
                },
                timeout=10
            )
            if response.status_code == 200:
                self.token = response.json()["access_token"]
                return True
            return False
        except Exception as e:
            print(f"Login error: {str(e)}")
            return False

    def get_headers(self) -> Dict[str, str]:
        return {"Authorization": f"Bearer {self.token}"} if self.token else {}
        
    def get_inventory(self) -> List[Dict[str, Any]]:
        """Get all variants with their product information for inventory management."""
        try:
            print("Getting variants from API...")
            # Get all variants first with timeout
            try:
                response = requests.get(
                    f"{self.base_url}/variants", 
                    headers=self.get_headers(),
                    timeout=10
                )
                if response.status_code != 200:
                    print(f"Error getting variants: {response.status_code}")
                    if response.status_code == 401:
                        print("Authentication error - please log in again")
                    elif response.status_code == 404:
                        print("Variants endpoint not found - check server URL")
                    else:
                        print(f"Server response: {response.text}")
                    return []

                variants = response.json()
                if not variants:
                    print("No variants found in inventory")
                    return []
                print(f"Retrieved {len(variants)} variants")

            except requests.Timeout:
                print("Timeout while getting variants - server taking too long to respond")
                return []
            except requests.ConnectionError:
                print("Connection error - check if the server is running")
                return []
            except Exception as e:
                print(f"Unexpected error getting variants: {str(e)}")
                return []

            # Collect unique product IDs
            product_ids = {variant['product_id'] for variant in variants}
            print(f"Found {len(product_ids)} unique products to fetch")
            products_map = {}

            # Get product details in batches
            for product_id in product_ids:
                try:
                    product_response = requests.get(
                        f"{self.base_url}/products/{product_id}", 
                        headers=self.get_headers(),
                        timeout=5
                    )
                    if product_response.status_code == 200:
                        products_map[product_id] = product_response.json()
                    else:
                        print(f"Warning: Failed to get product {product_id}: {product_response.status_code}")
                except Exception as e:
                    print(f"Warning: Error getting product {product_id}: {str(e)}")

            # Build inventory items list
            inventory_items = []
            for variant in variants:
                product_id = variant['product_id']
                if product_id in products_map:
                    product = products_map[product_id]
                    try:
                        inventory_items.append({
                            "id": variant["id"],
                            "product_id": product["id"],
                            "product_name": product["name"],
                            "barcode": variant["barcode"],
                            "price": float(variant["price"]),
                            "quantity": float(variant["quantity"]),
                            "category": product.get("category_name", "Uncategorized"),
                            "size": variant.get("size", ""),
                            "color": variant.get("color", "")
                        })
                    except (KeyError, ValueError) as e:
                        print(f"Warning: Error processing variant {variant.get('id')}: {str(e)}")
                        continue

            return inventory_items

        except Exception as e:
            print(f"Error in get_inventory: {str(e)}")
            return []

    def _ensure_authenticated(self):
        """Ensure we have a valid authentication token.
        Returns True if we're authenticated, False otherwise."""
        if not self.token:
            print("No authentication token found, attempting to login...")
            # Try to get credentials from environment variables or use defaults
            username = os.environ.get("API_USERNAME", "admin")
            password = os.environ.get("API_PASSWORD", "password123")
            return self.login(username, password)
        return True
        
    def _handle_auth_error(self, response):
        """Handle 401 authentication errors by attempting to re-authenticate.
        Returns True if re-authentication was successful."""
        if response.status_code == 401:
            print("Authentication error (401), attempting to re-login...")
            # Try to get credentials from environment variables or use defaults
            username = os.environ.get("API_USERNAME", "admin")
            password = os.environ.get("API_PASSWORD", "password123")
            return self.login(username, password)
        return False
